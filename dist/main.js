/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"./src/map.js\");\n/* harmony import */ var _players__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./players */ \"./src/players.js\");\n\r\n\r\n\r\nclass Game {\r\n\r\n    constructor(map = new _map__WEBPACK_IMPORTED_MODULE_0__.default(), players = new _players__WEBPACK_IMPORTED_MODULE_1__.default()){\r\n        this.mapGrid = map;\r\n\r\n        this.gameWindowElement = document.getElementById('game-window');\r\n        this.phaseElement = document.getElementsByClassName('claim')[0];\r\n        this.sidebar = document.createElement(\"div\");\r\n        this.turnImage = document.createElement(\"img\");\r\n        this.turnImageContainer = document.createElement(\"div\");\r\n        this.turn1 = document.createElement('div');\r\n        this.turn2 = document.createElement('div');\r\n        this.turn3 = document.createElement('div');\r\n        this.turn4 = document.createElement('div');\r\n        this.btnContainer = document.createElement(\"div\");\r\n        this.btnContainer.classList.add(\"end-turn-btn-container\");\r\n        this.showBonuses = document.getElementById(\"show-bonuses\");\r\n        this.button = null;\r\n\r\n        this.players = players;\r\n        this.turn = 0;\r\n        this.currentPlayer = this.players.array[this.turn]; \r\n        this.currentAttackable = [];\r\n        this.territorySelectedInstance = null;\r\n        this.turnOrderArray = this.players;\r\n\r\n        this.turnPlaceable = 3;\r\n\r\n        this.currentMoveable = [];\r\n\r\n        this.bonusesRevealed = false;\r\n        this.claimTerritoryPhase = true; // for beginning of game, once off does not come back\r\n        this.initialPlacementPhase = false; // for beginning of game, once turned on then off does not come back\r\n        this.placementPhase = false;\r\n        this.battlePhase = false;\r\n        this.territorySelected = false;\r\n        this.fortifyPhase = false;\r\n        this.turnPlaceableEvaluated = false;\r\n\r\n        this.battleWonFortificationPhase = false;\r\n        this.battleWonTerritoryInstance = null;\r\n\r\n        this.buildLayout();\r\n    }\r\n\r\n    assignEventListeners(){\r\n        Object.keys(this.mapGrid.hashOfTiles).forEach(pointer => {\r\n            let tile = this.mapGrid.hashOfTiles[pointer];\r\n            if (!tile.deadSpace){\r\n                tile.tileElement.addEventListener(\"click\", () => this.clickableAction(tile))\r\n            }\r\n        })\r\n    }\r\n\r\n    // Evaluate the current state to see what a click on the div is responsible for doing\r\n\r\n    clickableAction(tile){\r\n        if(this.claimTerritoryPhase === true){\r\n            this.handleClaimTerritoryPhase(tile);\r\n        } else if(this.initialPlacementPhase === true){\r\n            this.handleInitialPlacementPhase(tile);\r\n        } else if(this.placementPhase === true){\r\n            // console.log(\"in placement phase\")\r\n            this.handlePlacementPhase(tile);\r\n        } else if(this.battlePhase === true){\r\n            // console.log(\"in battle phase\")\r\n           this.handleBattlePhase(tile);\r\n        } else if (this.fortifyPhase === true){\r\n            this.handleFortifyPhase(tile);\r\n        }\r\n        this.updateInfoDisplay();\r\n    }\r\n\r\n    handleClaimTerritoryPhase(tile){\r\n        if (!tile.status){\r\n            tile.claimTile(this.currentPlayer.team);\r\n            tile.receiveOwner(this.currentPlayer);\r\n\r\n            this.currentPlayer.addTerritory(tile);\r\n\r\n            tile.status = true;\r\n            tile.claimable();\r\n            \r\n            this.allTerritoriesClaimed();\r\n            \r\n            this.nextPlayer();\r\n        }   \r\n    }\r\n\r\n    handleInitialPlacementPhase(tile){\r\n        if (this.turnPlaceable > 0){\r\n            this.placeTroopsOnClick(tile);\r\n            if (this.turnPlaceable < 1){\r\n                this.turnPlaceable = 3;\r\n                this.nextPlayer();\r\n            }\r\n        } \r\n    }\r\n\r\n    handlePlacementPhase(tile){\r\n        // if (this.turnPlaceableEvaluated === false){\r\n        //     this.turnPlaceable = this.currentPlayer.bonusUnits();\r\n        //     this.turnPlaceableEvaluated = true;\r\n        // } \r\n        this.placeTroopsOnClick(tile);\r\n        this.updateInfoDisplay();\r\n    }   \r\n\r\n    handleBattlePhase(tile){\r\n        if (tile.owner === this.currentPlayer && this.territorySelected === false && tile.units > 0){\r\n            this.getAttackableTerritories(tile);\r\n        } else if(this.territorySelected === true && this.currentAttackable.includes(tile) && this.battleWonFortificationPhase === false){\r\n            this.handleAttackClick(tile);\r\n        } else if(this.territorySelected === true && this.territorySelectedInstance === tile && this.battleWonFortificationPhase === false){\r\n            tile.tileElement.classList.remove(\"selected\");\r\n            this.territorySelected = false;\r\n            this.territorySelectedInstance = null;\r\n        } else if (this.battleWonFortificationPhase === true && tile === this.battleWonTerritoryInstance){\r\n            this.handleBattleFortification(tile);\r\n        }\r\n    }\r\n\r\n    handleFortifyPhase(tile){\r\n        if (tile.owner === this.currentPlayer && this.territorySelected === false && tile.units > 0){\r\n            this.getMoveableTiles(tile);\r\n        } else if (this.territorySelected === true && this.currentMoveable.includes(tile) && this.territorySelectedInstance !== tile){\r\n            this.handleMoveClick(tile);\r\n        } else if(this.territorySelected === true && this.territorySelectedInstance === tile){\r\n            tile.tileElement.classList.remove(\"selected\");\r\n            this.territorySelected = false;\r\n            this.territorySelectedInstance = null;\r\n        } \r\n    }\r\n\r\n\r\n    // check to see if claim territory phase is over, then update the current phase\r\n    // Also set\r\n\r\n    allTerritoriesClaimed(){\r\n        let claimedCount = 0;\r\n        Object.keys(this.mapGrid.hashOfTiles).forEach( pointer => {\r\n            let tile = this.mapGrid.hashOfTiles[pointer];\r\n            if (tile.status === true){\r\n                claimedCount += 1;\r\n            }\r\n        })\r\n    \r\n        if (claimedCount === this.mapGrid.size - 6){\r\n            this.claimTerritoryPhase = false; // this will NOT be REACTIVATED\r\n            this.initialPlacementPhase = true; \r\n        } \r\n    }\r\n\r\n    placeTroopsOnClick(tile){\r\n        if (this.currentPlayer === tile.owner && this.turnPlaceable > 0){\r\n            this.currentPlayer.placeUnit();\r\n            tile.receiveUnits();\r\n            this.turnPlaceable -= 1;\r\n            if (this.turnPlaceable < 1 && this.placementPhase === true){\r\n                this.turnPlaceableEvaluated = false;\r\n                this.placementPhase = false;\r\n                this.battlePhase = true;\r\n                this.button.innerHTML = \"End Attack Phase\";\r\n            }\r\n        } \r\n    }\r\n\r\n    initialPlacementOverCheck(){\r\n        let countCheck = 0;\r\n        this.players.array.forEach(player => {\r\n            if (player.availabeUnits === 0){\r\n                countCheck += 1;\r\n            }\r\n        })\r\n        if (countCheck === this.players.array.length){\r\n            this.initialPlacementPhase = false; // this will NOT be REACTIVATED\r\n            this.placementPhase = true;\r\n            // this.addEndAttackButton();\r\n        }\r\n    }\r\n\r\n    getAttackableTerritories(tile){\r\n        this.currentAttackable = this.mapGrid.getAdjacentEnemies(tile, this.currentPlayer);\r\n        tile.tileElement.classList.add(\"selected\");\r\n        this.territorySelected = true;\r\n        this.territorySelectedInstance = tile;\r\n    }\r\n\r\n    handleAttackClick(tile){\r\n        if (tile.owner !== this.currentPlayer && this.territorySelectedInstance.units > 0) {\r\n            let attackRoll = Math.floor(Math.random() * 6) + 1;\r\n            let defenseRoll = Math.floor(Math.random() * 6) + 1;\r\n            if (attackRoll > defenseRoll){\r\n                if(!tile.units){\r\n                    tile.claimTile(this.currentPlayer.team);\r\n                    tile.loseTile(tile.owner.team);\r\n                    this.currentPlayer.addTerritory(tile);\r\n                    tile.owner.loseTerritory(tile);\r\n                    tile.receiveOwner(this.currentPlayer);\r\n\r\n                    this.territorySelectedInstance.removeUnits();\r\n                    tile.receiveUnits();\r\n\r\n                    this.battleWonFortificationPhase = true;\r\n                    this.battleWonTerritoryInstance = tile;\r\n                    tile.tileElement.classList.add(\"selected\");\r\n                    this.button.innerHTML = \"End Battle Movement\"\r\n                } else{\r\n                    tile.removeUnits();\r\n                    tile.owner.allUnits -= 1;\r\n                }\r\n            } else {\r\n                this.territorySelectedInstance.removeUnits();\r\n                this.currentPlayer.allUnits -= 1;\r\n                if(this.territorySelectedInstance.units === null){\r\n                    this.territorySelectedInstance.tileElement.classList.remove(\"selected\");\r\n                    this.territorySelectedInstance = null;\r\n                    this.territorySelected = false;\r\n                }\r\n            }  \r\n        }\r\n    }\r\n\r\n    getMoveableTiles(tile){\r\n        this.currentMoveable = this.mapGrid.getAdjacentFriendly(tile, this.currentPlayer);\r\n        tile.tileElement.classList.add(\"selected\");\r\n        this.territorySelected = true;\r\n        this.territorySelectedInstance = tile;\r\n    }\r\n\r\n    handleMoveClick(tile){\r\n        if (this.territorySelectedInstance.units > 0){\r\n            this.territorySelectedInstance.removeUnits();\r\n            tile.receiveUnits();\r\n            if (this.territorySelectedInstance.units === null){\r\n                this.territorySelectedInstance.tileElement.classList.remove(\"selected\");\r\n                tile.tileElement.classList.remove(\"selected\");\r\n                this.territorySelectedInstance = null;\r\n                this.territorySelected = false;\r\n\r\n                this.battleWonFortificationPhase = false;\r\n                this.battleWonTerritoryInstance = null;\r\n\r\n                if(this.battlePhase === true){\r\n                    this.button.innerHTML = \"End Attack Phase\";\r\n                }\r\n            }\r\n        } \r\n    }\r\n\r\n    handleBattleFortification(tile){\r\n        if (tile === this.battleWonTerritoryInstance){\r\n            this.handleMoveClick(tile);\r\n        }\r\n    }\r\n\r\n    // switch player, and reset this.currentPlayer \r\n\r\n    nextPlayer(){\r\n        if (this.turn === 3){\r\n            this.turn = 0;\r\n        }\r\n        else {\r\n            this.turn += 1;\r\n        }\r\n\r\n        if(this.initialPlacementPhase === true){\r\n            this.initialPlacementOverCheck();\r\n        }\r\n\r\n        this.currentPlayer = this.players.array[this.turn];\r\n        this.renderPlayerImg();\r\n        this.updateTurnOrder();\r\n\r\n        if (this.territorySelectedInstance){\r\n            this.territorySelectedInstance.tileElement.classList.remove(\"selected\");\r\n            this.territorySelectedInstance = null;\r\n            this.territorySelected = false;\r\n        }\r\n        if (this.initialPlacementPhase === false && this.claimTerritoryPhase === false && !this.button){\r\n            this.addEndTurnButton();\r\n            this.button.innerHTML = \"Place Units\";\r\n        }\r\n        if (this.placementPhase === true){\r\n            this.turnPlaceable = this.currentPlayer.bonusUnits();\r\n            this.turnPlaceableEvaluated = true;\r\n        }\r\n\r\n        this.updateInfoDisplay();\r\n    }\r\n\r\n    endAttack(){\r\n        this.territorySelectedInstance.tileElement.classList.remove(\"selected\");\r\n        this.territorySelectedInstance = null;\r\n        this.territorySelected = false;\r\n        this.battlePhase = false;\r\n        this.fortifyPhase = true;\r\n    }\r\n\r\n    updateInfoDisplay(){\r\n        if (!this.claimTerritoryPhase){\r\n            let i = this.turn;\r\n            this.turn2.innerHTML = \"2: \" + this.players.array[(i + 1) % 4].team.charAt(0).toUpperCase() + this.players.array[(i + 1) % 4].team.slice(1)\r\n                + \" | Units: \" + this.players.array[(i + 1) % 4].allUnits;\r\n            this.turn3.innerHTML = \"3: \" + this.players.array[(i + 2) % 4].team.charAt(0).toUpperCase() + this.players.array[(i + 2) % 4].team.slice(1)\r\n                + \" | Units: \" + this.players.array[(i + 2) % 4].allUnits;\r\n            this.turn4.innerHTML = \"4: \" + this.players.array[(i + 3) % 4].team.charAt(0).toUpperCase() + this.players.array[(i + 3) % 4].team.slice(1)\r\n                + \" | Units: \" + this.players.array[(i + 3) % 4].allUnits;\r\n        }\r\n\r\n        if (this.initialPlacementPhase === true){\r\n            this.turn1.innerHTML = \"Available: \" + this.turnPlaceable\r\n            this.phaseElement.id = \"\";\r\n            this.phaseElement = document.getElementsByClassName(\"initial-place\")[0];\r\n            this.phaseElement.id = \"rid-opacity\";\r\n        } else if (this.placementPhase === true){\r\n            this.turn1.innerHTML = \"Available: \" + this.turnPlaceable\r\n            this.phaseElement.id = \"\";\r\n            this.phaseElement = document.getElementsByClassName(\"placement\")[0];\r\n            this.phaseElement.id = \"rid-opacity\";;\r\n        } else if (this.battlePhase === true && this.battleWonFortificationPhase === false){\r\n            this.turn1.innerHTML = \"Units: \" + this.currentPlayer.allUnits;\r\n            this.phaseElement.id = \"\";\r\n            this.phaseElement = document.getElementsByClassName(\"battle\")[0];\r\n            this.phaseElement.id = \"rid-opacity\";;\r\n            // console.log(\"battle phase display\")\r\n        } else if (this.battlePhase === true && this.battleWonFortificationPhase === true){\r\n            this.turn1.innerHTML = \"Units: \" + this.currentPlayer.allUnits;\r\n            this.phaseElement.id = \"\";\r\n            this.phaseElement = document.getElementsByClassName(\"battle-move\")[0];\r\n            this.phaseElement.id = \"rid-opacity\";;\r\n            // console.log(\"battle move phase display\")\r\n        } else if (this.fortifyPhase === true){\r\n            this.turn1.innerHTML = \"Units: \" + this.currentPlayer.allUnits;\r\n            this.phaseElement.id = \"\";\r\n            this.phaseElement = document.getElementsByClassName(\"fortify\")[0];\r\n            this.phaseElement.id = \"rid-opacity\";;\r\n            // console.log(\"fortify phase display\")\r\n        }\r\n    }\r\n\r\n\r\n    // !!! LAYOUT !!!\r\n    // !!! LAYOUT !!!\r\n    // !!! LAYOUT !!!\r\n    // !!! LAYOUT !!!\r\n\r\n    buildLayout(){\r\n        this.phaseElement.id = \"rid-opacity\";\r\n\r\n        this.sidebar.classList.add(\"sidebar\");\r\n        \r\n        this.turnImage.classList.add(\"player-img\")\r\n        \r\n        this.turnImageContainer.classList.add(\"player-img-container\");\r\n        this.turnImageContainer.appendChild(this.turnImage);\r\n\r\n        this.sidebar.append(this.turnImageContainer);\r\n\r\n        this.renderPlayerImg();\r\n\r\n        this.createTurnOrder();\r\n        this.updateTurnOrder();\r\n\r\n        this.createMap();\r\n        this.sidebar.appendChild(this.btnContainer);\r\n        this.gameWindowElement.append(this.sidebar);\r\n        \r\n    }\r\n\r\n    createMap(){\r\n        this.gameWindowElement.appendChild(this.addMapInfoContainer());\r\n        this.initiateShowBonuses();\r\n        // let battleGrounds = document.getElementsByClassName(\"battle-grounds\");\r\n        // Array.from(battleGrounds).forEach(el => el.style.backgroundColor = \"pink\");\r\n    }\r\n\r\n    addMapInfoContainer(){\r\n        let mapAndInfoContainer = document.createElement(\"div\");\r\n        mapAndInfoContainer.classList.add(\"map-info-container\");\r\n\r\n        let infoContainer = document.createElement(\"div\");\r\n        infoContainer.classList.add(\"info-container\");\r\n\r\n        let lineStrike = document.createElement(\"div\");\r\n        lineStrike.classList.add(\"line-strike\");\r\n        infoContainer.appendChild(lineStrike);\r\n\r\n        let name = document.createElement(\"div\");\r\n        name.classList.add(\"name\");\r\n        name.innerHTML = \"Zach Vaillancourt\";\r\n        let nameContainer = document.createElement(\"div\");\r\n        nameContainer.classList.add(\"name-container\");\r\n        nameContainer.appendChild(name);\r\n\r\n        infoContainer.appendChild(nameContainer);\r\n\r\n        infoContainer.appendChild(this.createTitle());\r\n\r\n        let github = document.createElement(\"a\");\r\n        github.classList.add(\"github\");\r\n        github.href = \"https://github.com/zachvaillan\";\r\n        github.target = \"_blank\";\r\n        let githubLogo = document.createElement(\"img\");\r\n        githubLogo.src = \"../assets/GitHub_Logo_White.png\";\r\n        githubLogo.classList.add(\"github-logo\");\r\n        github.appendChild(githubLogo);\r\n\r\n        let linkedIn = document.createElement(\"a\");\r\n        linkedIn.classList.add(\"linked-in\");\r\n        linkedIn.href = \"https://www.linkedin.com/in/zachary-vaillancourt-0b0342112/\";\r\n        linkedIn.target = \"_blank\";\r\n        let linkedInLogo = document.createElement(\"img\");\r\n        linkedInLogo.src = \"../assets/LI-Logo.png\"\r\n        linkedInLogo.classList.add(\"linked-in-logo\");\r\n        linkedIn.appendChild(linkedInLogo);\r\n\r\n        let linksContainer = document.createElement(\"div\");\r\n        linksContainer.classList.add(\"links-container\");\r\n        linksContainer.appendChild(github);\r\n        linksContainer.appendChild(linkedIn);\r\n\r\n        infoContainer.appendChild(linksContainer);\r\n\r\n        mapAndInfoContainer.appendChild(this.mapGrid.mapElement);\r\n        mapAndInfoContainer.appendChild(infoContainer);\r\n        return mapAndInfoContainer;\r\n        \r\n    }\r\n\r\n    renderPlayerImg(){\r\n        if (this.currentPlayer.team === \"red\"){\r\n            this.turnImage.src = \"../assets/8.png\"; // for github pages use \"assets/8.png\"\r\n            this.turnImageContainer.style.background = \"linear-gradient(black, rgba(255, 0, 0, 0.6))\";\r\n            this.turn1.style.background = \"linear-gradient(rgba(255, 0, 0, 0.3), black)\";\r\n        } else if (this.currentPlayer.team === \"blue\"){\r\n            this.turnImage.src = \"../assets/4.png\";\r\n            this.turnImageContainer.style.background = \"linear-gradient(black, rgba(0, 0, 255, 0.6))\";\r\n            this.turn1.style.background = \"linear-gradient(rgba(0, 0, 255, 0.3), black\";\r\n        } else if (this.currentPlayer.team === \"gray\"){\r\n            this.turnImage.src = \"../assets/19.png\";\r\n            this.turnImageContainer.style.background = \"linear-gradient(black, rgba(128, 128, 128, 0.6))\";\r\n            this.turn1.style.background = \"linear-gradient(rgba(128, 128, 128, 0.3), black)\";\r\n        } else if (this.currentPlayer.team === \"green\"){\r\n            this.turnImage.src = \"../assets/15.png\";\r\n            this.turnImageContainer.style.background = \"linear-gradient(black, rgba(0, 128, 0, 0.6))\";\r\n            this.turn1.style.background = \"linear-gradient(rgba(0, 128, 0, 0.3), black)\";\r\n        }\r\n    }\r\n\r\n    createTurnOrder(){\r\n        let turnOrderContainer = document.createElement(\"div\");\r\n        turnOrderContainer.classList.add(\"turn-order-container\");\r\n\r\n        this.turn1.classList.add(\"current-turn\");\r\n        this.turn2.classList.add(\"turn\");\r\n        this.turn3.classList.add(\"turn\");\r\n        this.turn4.classList.add(\"turn\");\r\n\r\n        turnOrderContainer.appendChild(this.turn1);\r\n        turnOrderContainer.appendChild(this.turn2);\r\n        turnOrderContainer.appendChild(this.turn3);\r\n        turnOrderContainer.appendChild(this.turn4);\r\n\r\n        this.sidebar.appendChild(turnOrderContainer);\r\n    }\r\n\r\n    updateTurnOrder(){\r\n        let i = this.turn;\r\n        this.turn1.innerHTML = this.currentPlayer.team.charAt(0).toUpperCase() + this.currentPlayer.team.slice(1);\r\n        this.turn2.innerHTML = \"2: \" + this.players.array[(i + 1) % 4].team.charAt(0).toUpperCase() + this.players.array[(i + 1) % 4].team.slice(1);\r\n        this.turn3.innerHTML = \"3: \" + this.players.array[(i + 2) % 4].team.charAt(0).toUpperCase() + this.players.array[(i + 2) % 4].team.slice(1);\r\n        this.turn4.innerHTML = \"4: \" + this.players.array[(i + 3) % 4].team.charAt(0).toUpperCase() + this.players.array[(i + 3) % 4].team.slice(1);\r\n    }\r\n\r\n    addEndTurnButton(){\r\n        let endTurnButton = document.createElement(\"button\");\r\n        endTurnButton.innerHTML = \"End Turn\";\r\n        endTurnButton.onclick = () => this.handleButtonChange();\r\n        endTurnButton.classList.add(\"end-turn-btn\");\r\n        \r\n        this.btnContainer.appendChild(endTurnButton);\r\n        \r\n        this.button = endTurnButton; // to be used to update this.button;\r\n    }\r\n\r\n    handleButtonChange(){\r\n        if(this.initialPlacementPhase === true){\r\n            this.nextPlayer();\r\n        } else if (this.battlePhase === true){\r\n            if (this.battleWonFortificationPhase === true){\r\n                this.battleWonFortificationPhase = false;\r\n                this.battleWonTerritoryInstance.tileElement.classList.remove(\"selected\");\r\n                this.battleWonTerritoryInstance = null;\r\n                this.territorySelectedInstance.tileElement.classList.remove(\"selected\");\r\n                this.territorySelected = false;\r\n                this.territorySelectedInstance = null;\r\n                this.button.innerHTML = \"End Attack Phase\";\r\n            } else {\r\n                this.battlePhase = false;\r\n                this.fortifyPhase = true;\r\n                this.button.innerHTML = \"End Turn\"\r\n            }\r\n        } else if (this.fortifyPhase === true){\r\n            this.fortifyPhase = false;\r\n            this.button.innerHTML = \"Place Units\";\r\n            this.placementPhase = true;\r\n            this.nextPlayer();\r\n        }\r\n        this.updateInfoDisplay();\r\n    }\r\n\r\n    createTitle(){\r\n        let titleContainer = document.createElement(\"div\");\r\n        titleContainer.classList.add(\"title-container\");        \r\n\r\n        let wholeTitle = (\"STARQUEST\").split(\"\");\r\n\r\n        wholeTitle.forEach( (char, i) => {\r\n            let titleChar = document.createElement(\"div\");\r\n            titleChar.classList.add(`title-char${i}`);\r\n            titleChar.innerHTML = char;\r\n            titleContainer.appendChild(titleChar);\r\n        });\r\n        return titleContainer;\r\n    }\r\n\r\n    initiateShowBonuses(){\r\n        this.showBonuses.addEventListener(\"click\", () => this.revealBonuses());\r\n    }\r\n\r\n    revealBonuses(){\r\n        let battleGrounds = document.getElementsByClassName(\"battle-grounds\");\r\n        let hideAway = document.getElementsByClassName(\"hide-away\");\r\n        let theBelt = document.getElementsByClassName(\"the-belt\");\r\n        let bridge = document.getElementsByClassName(\"bridge\");\r\n        let unitBonuses = document.getElementById(\"unit-bonuses\");\r\n\r\n        if (this.bonusesRevealed === false){\r\n            Array.from(battleGrounds).forEach(el => el.style.backgroundColor = \"pink\");\r\n            Array.from(hideAway).forEach(el => el.style.backgroundColor = \"yellow\");\r\n            Array.from(theBelt).forEach(el => el.style.backgroundColor = \"white\");\r\n            Array.from(bridge).forEach(el => el.style.backgroundColor = \"orange\");\r\n            this.bonusesRevealed = true;\r\n            unitBonuses.classList.remove(\"hidden\");\r\n            this.showBonuses.innerHTML = \"Hide Bonuses\";\r\n            \r\n        } else {\r\n            Array.from(battleGrounds).forEach(el => el.style.backgroundColor = \"transparent\");\r\n            Array.from(hideAway).forEach(el => el.style.backgroundColor = \"transparent\");\r\n            Array.from(theBelt).forEach(el => el.style.backgroundColor = \"transparent\");\r\n            Array.from(bridge).forEach(el => el.style.backgroundColor = \"transparent\");\r\n            unitBonuses.classList.add(\"hidden\");\r\n            this.bonusesRevealed = false;\r\n            this.showBonuses.innerHTML = \"Show Bonuses\";\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Game);\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {  \r\n\r\n    let game = new _game__WEBPACK_IMPORTED_MODULE_0__.default();\r\n    game.assignEventListeners();\r\n    game.updateInfoDisplay();\r\n    \r\n});\r\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/map.js":
/*!********************!*\
  !*** ./src/map.js ***!
  \********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _tile_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tile.js */ \"./src/tile.js\");\n\r\n\r\nclass Map {\r\n    \r\n    constructor(){\r\n        this.mapElement = document.createElement('div');\r\n        this.mapElement.classList.add('map');\r\n        this.hashOfTiles = {};\r\n        this.keyMaker = 0;\r\n        for (let row = 0; row < 4; row++){\r\n            let rowElement = document.createElement(\"div\");\r\n            rowElement.classList.add(\"row\");\r\n\r\n            for (let col = 0; col < 8; col++){\r\n                let pos = [row, col];\r\n                let newTile = new _tile_js__WEBPACK_IMPORTED_MODULE_0__.default(pos);\r\n                this.hashOfTiles[this.keyMaker] = newTile;\r\n                this.keyMaker += 1;\r\n\r\n                let tileContainer = document.createElement(\"div\");\r\n                tileContainer.classList.add(\"tile-container\");\r\n                tileContainer.appendChild(newTile.tileElement);\r\n                rowElement.appendChild(tileContainer);\r\n\r\n                this.createBonuses(newTile, tileContainer);\r\n                this.turnToDeadSpace(newTile, pos);\r\n            }\r\n            this.mapElement.appendChild(rowElement);\r\n        }\r\n\r\n        this.size = Object.keys(this.hashOfTiles).length;\r\n        \r\n        // this.createDeadSpaces();\r\n        // this.destroyUnreachableTiles();\r\n    }\r\n\r\n    getAdjacentEnemies(tile, currentPlayer){\r\n        let adjacent = tile.grabAdjacentTiles();\r\n        let enemies = [];\r\n\r\n        Object.keys(this.hashOfTiles).forEach(pointer => {\r\n            let compareTile = this.hashOfTiles[pointer];\r\n            if(compareTile.color !== currentPlayer.team) {\r\n                adjacent.forEach(adj => {\r\n                    if(adj[0] === compareTile.pos[0] && adj[1] === compareTile.pos[1]){\r\n                        enemies.push(compareTile);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return enemies;\r\n    }\r\n\r\n    getAdjacentFriendly(tile, currentPlayer){\r\n        let adjacent = tile.grabAdjacentTiles();\r\n        let friendlies = [];\r\n\r\n        Object.keys(this.hashOfTiles).forEach(pointer => {\r\n            let compareTile = this.hashOfTiles[pointer];\r\n            if(compareTile.color === currentPlayer.team) {\r\n                adjacent.forEach(adj => {\r\n                    if(adj[0] === compareTile.pos[0] && adj[1] === compareTile.pos[1]){\r\n                        friendlies.push(compareTile);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return friendlies;\r\n    }\r\n\r\n    turnToDeadSpace(tile, pos){\r\n        if(pos[0] === 3 && pos[1] === 1){\r\n            tile.tileElement.id = \"dead-space\";\r\n            tile.deadSpace = true;\r\n            tile.tileElement.classList.remove(\"clickable\");\r\n        } else if(pos[0] === 1 && pos[1] === 3){\r\n            tile.tileElement.id = \"dead-space\";\r\n            tile.deadSpace = true;\r\n            tile.tileElement.classList.remove(\"clickable\");\r\n        } else if(pos[0] === 2 && pos[1] === 5){\r\n            tile.tileElement.id = \"dead-space\";\r\n            tile.deadSpace = true;\r\n            tile.tileElement.classList.remove(\"clickable\");\r\n        } else if(pos[0] === 2 && pos[1] === 6){\r\n            tile.tileElement.id = \"dead-space\";\r\n            tile.deadSpace = true;\r\n            tile.tileElement.classList.remove(\"clickable\");\r\n        } else if(pos[0] === 3 && pos[1] === 3){\r\n            tile.tileElement.id = \"dead-space\";\r\n            tile.deadSpace = true;\r\n            tile.tileElement.classList.remove(\"clickable\");\r\n        } else if(pos[0] === 0 && pos[1] === 5){\r\n            tile.tileElement.id = \"dead-space\";\r\n            tile.deadSpace = true;\r\n            tile.tileElement.classList.remove(\"clickable\");\r\n        }\r\n    }\r\n\r\n    getAdjacentTileInstances(tile){\r\n        let adjacentPos = tile.grabAdjacentTiles();\r\n        let adjacentInstances = [];\r\n        Object.keys(this.hashOfTiles).forEach(pointer => {\r\n            let hashTile = this.hashOfTiles[pointer];\r\n            adjacentPos.forEach(adj => {\r\n                if (hashTile.pos === adj){\r\n                    adjacentInstances.push(hashTile);\r\n                }\r\n            })\r\n        })\r\n        return adjacentInstances;\r\n    }\r\n\r\n    createBonuses(tile, tileContainer){\r\n        if ( (tile.pos[0] === 0 && tile.pos[1] === 0) || (tile.pos[0] === 0 && tile.pos[1] === 1) \r\n                || (tile.pos[0] === 0 && tile.pos[1] === 2) || (tile.pos[0] === 1 && tile.pos[1] === 0) \r\n                || (tile.pos[0] === 1 && tile.pos[1] === 1) || (tile.pos[0] === 1 && tile.pos[1] === 2)\r\n                || (tile.pos[0] === 2 && tile.pos[1] === 0) || (tile.pos[0] === 2 && tile.pos[1] === 1) \r\n                || (tile.pos[0] === 2 && tile.pos[1] === 2) ){\r\n            tile.battleGrounds = true;\r\n            tileContainer.classList.add(\"battle-grounds\");\r\n        } else if ( (tile.pos[0] === 1 && tile.pos[1] === 4) \r\n                    || (tile.pos[0] === 2 && tile.pos[1] === 4) ){\r\n            tile.bridge = true;\r\n            tileContainer.classList.add(\"bridge\");\r\n        } else if ( (tile.pos[0] === 3 && tile.pos[1] === 4)\r\n                    || (tile.pos[0] === 3 && tile.pos[1] === 5)\r\n                    || (tile.pos[0] === 3 && tile.pos[1] === 6)\r\n                    || (tile.pos[0] === 3 && tile.pos[1] === 7)){\r\n            tile.theBelt = true;\r\n            tileContainer.classList.add(\"the-belt\");\r\n        } else if ( (tile.pos[0] === 0 && tile.pos[1] === 6)\r\n                    || (tile.pos[0] === 0 && tile.pos[1] === 7)\r\n                    || (tile.pos[0] === 1 && tile.pos[1] === 6)\r\n                    || (tile.pos[0] === 1 && tile.pos[1] === 7)){\r\n            tile.hideAway = true;\r\n            tileContainer.classList.add(\"hide-away\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Map);\n\n//# sourceURL=webpack:///./src/map.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nclass Player {\r\n\r\n    constructor(team){\r\n        this.territories = [];\r\n\r\n        this.team = team;\r\n        this.availabeUnits = 9;\r\n        this.allUnits = 0;\r\n\r\n        this.unitsSelected = 0;\r\n    }\r\n\r\n    addTerritory(tile){\r\n        if (!this.territories.includes(tile)){\r\n            this.territories.push(tile);\r\n        }\r\n    }\r\n\r\n    loseTerritory(tile){\r\n        this.territories.forEach((tileCheck, i) => {\r\n            if(tile === tileCheck){\r\n                this.territories.splice(i, 1);\r\n            }\r\n        })\r\n    }\r\n\r\n    placeUnit(){\r\n        this.availabeUnits -= 1;\r\n        this.allUnits += 1;\r\n    }\r\n\r\n    grabUnits(){\r\n        this.unitsSelected += 1;\r\n    }\r\n\r\n    bonusUnits(){\r\n        let count = 0;\r\n        this.territories.forEach(ter => {\r\n            count += 1;\r\n        });\r\n        if (count < 3){\r\n            return 1;\r\n        }\r\n        return Math.floor(count / 3) + this.checkForBonuses();\r\n    }\r\n   \r\n    checkForBonuses(){\r\n        let bridge = 0;\r\n        let battleGrounds = 0;\r\n        let hideAway = 0;\r\n        let theBelt = 0;\r\n        let total = 0;\r\n        this.territories.forEach(ter => {\r\n            if(ter.bridge === true){\r\n                bridge += 1;\r\n            } else if (ter.battleGrounds === true){\r\n                battleGrounds += 1;\r\n            } else if (ter.hideAway === true){\r\n                hideAway += 1;\r\n            } else if (ter.theBelt === true){\r\n                theBelt += 1;\r\n            } \r\n        })\r\n        if (bridge === 2){\r\n            total += 2;\r\n        } \r\n        if (battleGrounds === 9){\r\n            total += 6;\r\n        }\r\n        if (hideAway === 4){\r\n            total += 3;\r\n        }\r\n        if (theBelt === 4){\r\n            total += 4;\r\n        }\r\n        return total;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);\n\n//# sourceURL=webpack:///./src/player.js?");

/***/ }),

/***/ "./src/players.js":
/*!************************!*\
  !*** ./src/players.js ***!
  \************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n\r\n\r\nconst TEAMS = [\r\n    \"red\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"gray\",\r\n]\r\n\r\nclass Players {\r\n\r\n    constructor(){\r\n        this.array = [];\r\n\r\n        for (let i = 0; i < 4; i++){\r\n            this.array.push(new _player__WEBPACK_IMPORTED_MODULE_0__.default(TEAMS[i]));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Players);\n\n//# sourceURL=webpack:///./src/players.js?");

/***/ }),

/***/ "./src/tile.js":
/*!*********************!*\
  !*** ./src/tile.js ***!
  \*********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nclass Tile {\r\n\r\n    constructor(pos){\r\n        this.pos = pos;\r\n        this.status = false;\r\n        this.deadSpace = false;\r\n\r\n        this.owner = null;\r\n        this.units = 0;\r\n        this.color = null;\r\n\r\n        this.bridge = false;\r\n        this.battleGrounds = false;\r\n        this.hideAway = false;\r\n        this.theBelt = false;\r\n\r\n        this.tileElement = document.createElement('div');\r\n        this.tileElement.classList.add('tile');\r\n\r\n        this.unitsElement = document.createElement('div');\r\n        this.unitsElement.classList.add('units')\r\n        this.tileElement.appendChild(this.unitsElement);\r\n\r\n        this.moveableTiles = [];\r\n\r\n        this.claimable();\r\n    }\r\n\r\n    claimTile(team){\r\n        this.tileElement.classList.add(team);\r\n    }\r\n\r\n    loseTile(team){\r\n        this.tileElement.classList.remove(team);\r\n    }\r\n\r\n    claimable(){\r\n        if (!this.status && this.deadSpace === false) {\r\n            this.tileElement.classList.add('clickable')\r\n        } else {\r\n            this.tileElement.classList.remove('clickable');\r\n        }\r\n    }\r\n\r\n    receiveOwner(player){\r\n        this.owner = player;\r\n        this.color = player.team;\r\n    }\r\n\r\n    receiveUnits(count = 1){\r\n        this.units += count;\r\n        this.unitsElement.innerHTML = this.units;\r\n    }\r\n\r\n    removeUnits(count = 1){\r\n        this.units -= count;\r\n        if (this.units === 0){\r\n            this.units = null;\r\n        }\r\n        this.unitsElement.innerHTML = this.units;\r\n    }\r\n\r\n    isValidPos(pos){\r\n        if ((pos[0] >= 0 && pos[0] < 4) && (pos[1] >= 0 && pos[1] < 8)){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    grabAdjacentTiles(){\r\n        let possibles = [];\r\n        let validMoves = [];\r\n\r\n        let right = ([this.pos[0] + 1, this.pos[1]]);\r\n        let left = ([this.pos[0] - 1, this.pos[1]]);\r\n        let up = ([this.pos[0], this.pos[1] + 1]);\r\n        let down = ([this.pos[0], this.pos[1] - 1]);\r\n        possibles.push(right, left, up, down, this.pos);\r\n\r\n        possibles.forEach(possibility => {\r\n            if(this.isValidPos(possibility)){\r\n                validMoves.push(possibility);\r\n            }\r\n        })\r\n        this.moveableTiles = validMoves;\r\n        return this.moveableTiles;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Tile);\n\n//# sourceURL=webpack:///./src/tile.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;